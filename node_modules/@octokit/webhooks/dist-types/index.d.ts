/// <reference types="node" />
import { IncomingMessage, ServerResponse } from "http";
import { createEventHandler } from "./event-handler/index";
import { createMiddleware } from "./middleware/index";
import { WebhookEventName } from "./middleware/verify-and-receive";
import { sign } from "./sign/index";
import { EmitterAnyEvent, EmitterEventName, EmitterWebhookEvent, EmitterWebhookEventMap, HandlerFunction, Options, WebhookError, WebhookEventHandlerError } from "./types";
import { verify } from "./verify/index";
declare class Webhooks<E extends EmitterWebhookEvent = EmitterWebhookEvent, TTransformed = unknown> {
    sign: (payload: string | object) => string;
    verify: (eventPayload: string | object, signature: string) => boolean;
    on: <E extends EmitterEventName>(event: E | E[], callback: HandlerFunction<E, TTransformed>) => void;
    onAny: (callback: (event: EmitterAnyEvent) => any) => void;
    onError: (callback: (event: WebhookEventHandlerError) => any) => void;
    removeListener: <E extends EmitterEventName>(event: E | E[], callback: HandlerFunction<E, TTransformed>) => void;
    receive: (event: EmitterWebhookEvent) => Promise<void>;
    middleware: (request: IncomingMessage, response: ServerResponse, next?: (err?: any) => void) => void | Promise<void>;
    verifyAndReceive: (options: EmitterWebhookEventMap[WebhookEventName] & {
        signature: string;
    }) => Promise<void>;
    constructor(options?: Options<E>);
}
declare const createWebhooksApi: Function;
export { EventPayloads } from "./generated/event-payloads";
export { EmitterEventMap, EmitterEventName, EmitterEventMap as EventTypesPayload, EmitterEventName as WebhookEvents, } from "./types";
export { createEventHandler, createMiddleware, createWebhooksApi, Webhooks, EmitterWebhookEvent, WebhookError, sign, verify, };
