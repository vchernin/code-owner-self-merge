import type { EmitterAnyEvent, EmitterEventName, EmitterWebhookEvent, HandlerFunction, Options, WebhookEventHandlerError } from "../types";
interface EventHandler<TTransformed = unknown> {
    on<E extends EmitterEventName>(event: E | E[], callback: HandlerFunction<E, TTransformed>): void;
    onAny(handler: (event: EmitterAnyEvent) => any): void;
    onError(handler: (event: WebhookEventHandlerError) => any): void;
    removeListener<E extends EmitterEventName>(event: E | E[], callback: HandlerFunction<E, TTransformed>): void;
    receive(event: EmitterWebhookEvent): Promise<void>;
}
export declare function createEventHandler(options: Options<any>): EventHandler;
export {};
